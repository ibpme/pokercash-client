{"version":3,"sources":["Player/Player.js","Game/Game.js","PlayerInput/PlayerInput.js","GameInput/GameInput.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","callOrCheck","bind","raise","fold","handleRaiseChange","state","raiseAmount","this","playerData","requiredCall","console","log","playerCheckOrCall","index","immuteState","Object","assign","amount","Number","playerRaise","playerFold","event","value","target","setState","name","cash","onClick","onChange","min","maxRaise","max","type","Component","Game","pot","numOfActivePlayers","numofTotalPlayers","status","playersData","addToPot","adjustMaxRaise","prevState","slice","every","player","checkWinner","immutateplayersData","numOfActive","forEach","isWinner","find","newRound","adjustRequiredCalls","number","map","key","length","renderPlayers","PlayerInput","required","playerNumber","handleInputChange","GameInput","numberOfTotalPlayers","renderPlayerInput","handleSubmit","playersArray","i","playerObject","String","turn","push","submitPlayers","Array","fill","onSubmit","App","gameReady","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iOAqEeA,G,MA/Df,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAKE,KAAO,EAAKA,KAAKF,KAAV,gBACZ,EAAKG,kBAAoB,EAAKA,kBAAkBH,KAAvB,gBACzB,EAAKI,MAAQ,CACXC,YAAa,GAPE,EADrB,0DAY+C,IAAvCC,KAAKR,MAAMS,WAAWC,cACxBC,QAAQC,IAAI,SACZJ,KAAKR,MAAMa,kBAAkBL,KAAKR,MAAMc,SAExCH,QAAQC,IAAI,QACZJ,KAAKR,MAAMa,kBAAkBL,KAAKR,MAAMc,UAjB9C,8BAqBI,IAAMC,EAAcC,OAAOC,OAAO,GAAIT,KAAKF,OACrCY,EAASC,OAAOJ,EAAYR,aAClCC,KAAKR,MAAMoB,YAAYZ,KAAKR,MAAMc,MAAOI,KAvB7C,6BA0BIP,QAAQC,IAAI,QACZJ,KAAKR,MAAMqB,WAAWb,KAAKR,MAAMc,SA3BrC,wCA8BoBQ,GAChB,IAAMC,EAAQD,EAAME,OAAOD,MAC3Bf,KAAKiB,SAAS,CACZlB,YAAagB,MAjCnB,+BAsCI,OACE,6BACE,6CAAmBf,KAAKR,MAAMS,WAAWiB,MACzC,4CAAkBlB,KAAKR,MAAMS,WAAWkB,MACxC,6CAAmBnB,KAAKR,MAAMS,WAAWC,cACzC,6BACE,4BAAQkB,QAASpB,KAAKP,aACoB,IAAvCO,KAAKR,MAAMS,WAAWC,aAAqB,QAAU,QAExD,2BACEmB,SAAUrB,KAAKH,kBACfyB,IAAKtB,KAAKR,MAAM+B,SAChBC,IAAKxB,KAAKR,MAAMS,WAAWkB,KAC3BJ,MAAOf,KAAKF,MAAMC,YAClBmB,KAAK,cACLO,KAAK,WAEP,4BAAQL,QAASpB,KAAKL,OAAtB,SACA,4BAAQyB,QAASpB,KAAKJ,MAAtB,cAxDV,GAA4B8B,cC2JbC,EA3Jf,kDACE,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACX8B,IAAK,EACLC,mBAAoB,EACpBC,kBAAmB,EACnBC,QAAQ,EACRR,SAAU,EACVS,YAAa,IAUf,EAAKC,SAAW,EAAKA,SAASvC,KAAd,gBAChB,EAAKwC,eAAiB,EAAKA,eAAexC,KAApB,gBAEtB,EAAKW,kBAAoB,EAAKA,kBAAkBX,KAAvB,gBACzB,EAAKkB,YAAc,EAAKA,YAAYlB,KAAjB,gBACnB,EAAKmB,WAAa,EAAKA,WAAWnB,KAAhB,gBAvBD,EADrB,gEA6BIM,KAAKiB,SAAS,CACZe,YAAahC,KAAKR,MAAMwC,YACxBH,mBAAoB7B,KAAKR,MAAMsC,kBAC/BA,kBAAmB9B,KAAKR,MAAMsC,sBAhCpC,+BAsCWpB,GACPV,KAAKiB,UAAS,SAACkB,GACb,MAAO,CAAEP,IAAKO,EAAUP,IAAMlB,QAxCpC,qCA4CiBA,GACbV,KAAKiB,SAAS,CAAEM,SAAUb,MA7C9B,4CAiDgCV,KAAKF,MAAMkC,YAAYI,QAC3BC,OAAM,SAACC,GAAD,OAAoC,IAAxBA,EAAOpC,iBAC/CF,KAAKiB,SAAS,CAAEM,SAAU,IAE5BvB,KAAKuC,gBArDT,oCAyDI,IAAMC,EAAsBxC,KAAKF,MAAMkC,YAAYI,QAC/CK,EAAc,EAClBD,EAAoBE,SAAQ,SAACJ,GAC3BG,EAAcH,EAAO1C,KAAO6C,EAAcA,EAAc,KAE1C,IAAhBA,EACIzC,KAAK2C,WACL3C,KAAKiB,SAAS,CAAEY,mBAAoBY,MAhE5C,iCAoEI,IAAMlC,EAAcC,OAAOC,OAAO,GAAIT,KAAKF,OAC5BS,EAAYyB,YAAYY,MAAK,SAACN,GAAD,OAAaA,EAAO1C,QACzDuB,MAAQZ,EAAYqB,IAE3BrB,EAAYgB,SAAW,EACvBvB,KAAKiB,SAAS,CAAEV,gBAChBP,KAAK6C,aA1ET,iCA8EI,IAAMtC,EAAcC,OAAOC,OAAO,GAAIT,KAAKF,OAC3CS,EAAYyB,YAAYU,SAAQ,SAACJ,GAC/BA,EAAO1C,MAAO,KAEhBI,KAAKiB,SAAS,CAAEe,YAAazB,EAAYyB,YAAaJ,IAAK,MAlF/D,wCAsFoBtB,GAChB,IAAMkC,EAAsBxC,KAAKF,MAAMkC,YAAYI,QAC7CnC,EAAauC,EAAoBlC,GACvCL,EAAWkB,MAAQlB,EAAWC,aAC9BF,KAAKiC,SAAShC,EAAWC,cACzBD,EAAWC,aAAe,EAC1BF,KAAKiB,SAAS,CAAEe,YAAaQ,IAC7BxC,KAAK8C,wBA7FT,kCAgGcxC,EAAOI,GAAS,IAAD,OACnB8B,EAAsBxC,KAAKF,MAAMkC,YAAYI,QAC7CnC,EAAauC,EAAoBlC,GAEvCL,EAAWkB,MAAQT,EACnBV,KAAKiC,SAASvB,GACdT,EAAWC,aAAe,EAC1BsC,EAAoBE,SAAQ,SAACJ,GACvBA,EAAOS,SAAW9C,EAAW8C,SAC/BT,EAAOpC,cAAgBQ,EAAS,EAAKZ,MAAMyB,aAG/CvB,KAAKiB,SAAS,CAAEe,YAAaQ,IAC7BxC,KAAKkC,eAAexB,GACpBV,KAAK8C,wBA9GT,iCAiHaxC,GACT,IAAMkC,EAAsBxC,KAAKF,MAAMkC,YAAYI,QAC7CnC,EAAauC,EAAoBlC,GACvCL,EAAWL,MAAO,EAClBK,EAAWC,aAAe,EAC1BF,KAAKiB,SAAS,CAAEe,YAAaQ,IAC7BxC,KAAK8C,wBAvHT,sCA0HmB,IAAD,OACd,OAAO9C,KAAKF,MAAMkC,YAAYgB,KAAI,SAAC/C,EAAYK,GAC7C,OACE,kBAAC,EAAD,CACE2C,IAAK3C,EACLA,MAAOA,EACPL,WAAYA,EACZgC,SAAU,EAAKA,SACfV,SAAU,EAAKzB,MAAMyB,SACrBlB,kBAAmB,EAAKA,kBACxBO,YAAa,EAAKA,YAClBC,WAAY,EAAKA,kBArI3B,+BA4II,OAAsC,IAAlCb,KAAKF,MAAMkC,YAAYkB,OAClB,2CAGP,6BACE,uDAA6BlD,KAAKF,MAAMgC,mBACxC,wDAA8B9B,KAAKF,MAAM+B,oBACzC,mCAAS7B,KAAKF,MAAM8B,KACpB,yCAAe5B,KAAKF,MAAMyB,UACzBvB,KAAKmD,qBArJd,GAA0BzB,a,OCyBX0B,EA7Bf,uKAEI,OACE,6BACE,uCAEE,2BACEC,UAAQ,EACRnC,KAAM,SAAWlB,KAAKR,MAAM8D,aAC5B7B,KAAK,OACLJ,SAAUrB,KAAKR,MAAM+D,qBAGzB,6BACA,uCAEE,2BACEF,UAAQ,EACRnC,KAAM,OAASlB,KAAKR,MAAM8D,aAC1B7B,KAAK,SACLH,IAAI,IACJD,SAAUrB,KAAKR,MAAM+D,0BArBjC,GAAiC7B,aC0ElB8B,EAzEf,kDACE,WAAYhE,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACX2D,qBAAsB,GAExB,EAAKC,kBAAoB,EAAKA,kBAAkBhE,KAAvB,gBACzB,EAAK6D,kBAAoB,EAAKA,kBAAkB7D,KAAvB,gBACzB,EAAKiE,aAAe,EAAKA,aAAajE,KAAlB,gBAPH,EADrB,8DAWoBoB,GAChB,IAAMI,EAAOJ,EAAME,OAAOE,KACpBH,EAAQD,EAAME,OAAOD,MAC3Bf,KAAKiB,SAAL,eACGC,EAAOH,MAfd,mCAmBeD,GAEX,IADA,IAAI8C,EAAe,GACVC,EAAI,EAAGA,EAAI7D,KAAKF,MAAM2D,qBAAsBI,IAAK,CACxD,IAEMC,EAAe,CACnBf,OAAQc,EACR3C,KAJWlB,KAAKF,MAAMiE,OAAO,SAAWF,IAKxC1C,KAJWnB,KAAKF,MAAMiE,OAAO,OAASF,IAKtCjE,MAAM,EACNoE,MAAM,EACN9D,aAAc,GAEhB0D,EAAaK,KAAKH,GAEpB9D,KAAKR,MAAM0E,cAAcN,KAlC7B,0CAqCuB,IAAD,OACZH,EAAuB9C,OAAOX,KAAKF,MAAM2D,sBAC/C,OAAOU,MAAMV,GACVW,OACApB,KAAI,SAACV,EAAQhC,GACZ,OACE,kBAAC,EAAD,CACEiD,kBAAmB,EAAKA,kBACxBN,IAAK3C,EACLgD,aAAchD,SA9C1B,+BAqDI,OACE,0BAAM+D,SAAUrE,KAAK2D,cACnB,oDAEE,2BACErC,IAAI,IACJE,IAAI,IACJN,KAAK,uBACLO,KAAK,SACLV,MAAOf,KAAKF,MAAM2D,qBAClBpC,SAAUrB,KAAKuD,qBAGlBvD,KAAK0D,oBACN,4BAAQW,SAAUrE,KAAK2D,cAAvB,eAnER,GAA+BjC,aCoChB4C,EAjCf,kDACE,WAAY9E,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACXyE,WAAW,EACXvC,YAAa,IAEf,EAAKkC,cAAgB,EAAKA,cAAcxE,KAAnB,gBANJ,EADrB,0DASgBkE,GACZ,IAAM5B,EAAc4B,EACpB5D,KAAKiB,SAAS,CAAEe,YAAaA,IAC7BhC,KAAKiB,SAAS,CAAEsD,WAAW,MAZ/B,+BAgBI,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACdxE,KAAKF,MAAMyE,UAGX,kBAAC,EAAD,CACEzC,kBAAmB9B,KAAKF,MAAMkC,YAAYkB,OAC1ClB,YAAahC,KAAKF,MAAMkC,cAJ1B,kBAAC,EAAD,CAAWkC,cAAelE,KAAKkE,sBApB3C,GAAyBxC,aCML+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvF,QAAQuF,MAAMA,EAAMC,a","file":"static/js/main.53a2e145.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//TODO:Move the necessary data to the Parent Game Component\r\n//Work with playerData in Player Component and playersData in Game Component\r\n//Add Fold Design and Prevention Code\r\n\r\nexport class Player extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.callOrCheck = this.callOrCheck.bind(this);\r\n    this.raise = this.raise.bind(this);\r\n    this.fold = this.fold.bind(this);\r\n    this.handleRaiseChange = this.handleRaiseChange.bind(this);\r\n    this.state = {\r\n      raiseAmount: 0,\r\n    };\r\n  }\r\n  callOrCheck() {\r\n    if (this.props.playerData.requiredCall === 0) {\r\n      console.log(\"Check\");\r\n      this.props.playerCheckOrCall(this.props.index);\r\n    } else {\r\n      console.log(\"Call\");\r\n      this.props.playerCheckOrCall(this.props.index);\r\n    }\r\n  }\r\n  raise() {\r\n    const immuteState = Object.assign({}, this.state);\r\n    const amount = Number(immuteState.raiseAmount);\r\n    this.props.playerRaise(this.props.index, amount);\r\n  }\r\n  fold() {\r\n    console.log(\"fold\");\r\n    this.props.playerFold(this.props.index);\r\n  }\r\n\r\n  handleRaiseChange(event) {\r\n    const value = event.target.value;\r\n    this.setState({\r\n      raiseAmount: value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Player Name : {this.props.playerData.name}</h3>\r\n        <p>Player Cash : {this.props.playerData.cash}</p>\r\n        <p>Required Call: {this.props.playerData.requiredCall}</p>\r\n        <div>\r\n          <button onClick={this.callOrCheck}>\r\n            {this.props.playerData.requiredCall === 0 ? \"Check\" : \"Call\"}\r\n          </button>\r\n          <input\r\n            onChange={this.handleRaiseChange}\r\n            min={this.props.maxRaise}\r\n            max={this.props.playerData.cash}\r\n            value={this.state.raiseAmount}\r\n            name=\"raiseAmount\"\r\n            type=\"number\"\r\n          />\r\n          <button onClick={this.raise}>Raise</button>\r\n          <button onClick={this.fold}>Fold</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import React, { Component } from \"react\";\r\nimport Player from \"../Player/Player\";\r\n\r\n//TODO: Get all the game neccasary game logic to this component\r\n//      Make component didmount to call the initial props for the player data\r\n// Make Turn Design and Prevention Code\r\nexport class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pot: 0,\r\n      numOfActivePlayers: 0,\r\n      numofTotalPlayers: 0,\r\n      status: true,\r\n      maxRaise: 0,\r\n      playersData: [],\r\n      // Players data is the one we will manipulate containing array of objects\r\n      // {\r\n      //   number: index,\r\n      //   name: nameVAlue,\r\n      //   cash: cashValue,\r\n      //   fold: false,\r\n      //   requiredCall: 0,\r\n      // }\r\n    };\r\n    this.addToPot = this.addToPot.bind(this);\r\n    this.adjustMaxRaise = this.adjustMaxRaise.bind(this);\r\n    // this.renderPlayers = this.renderPlayers.bind(this);\r\n    this.playerCheckOrCall = this.playerCheckOrCall.bind(this);\r\n    this.playerRaise = this.playerRaise.bind(this);\r\n    this.playerFold = this.playerFold.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //TODO: Research getDerivedStateFromProps\r\n    this.setState({\r\n      playersData: this.props.playersData,\r\n      numOfActivePlayers: this.props.numofTotalPlayers,\r\n      numofTotalPlayers: this.props.numofTotalPlayers,\r\n    });\r\n  }\r\n\r\n  //Game Actions Methods\r\n\r\n  addToPot(amount) {\r\n    this.setState((prevState) => {\r\n      return { pot: prevState.pot + amount };\r\n    });\r\n  }\r\n\r\n  adjustMaxRaise(amount) {\r\n    this.setState({ maxRaise: amount });\r\n  }\r\n  //We might want to make adjustRequiredCalls and checkWinner the same function\r\n  adjustRequiredCalls() {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    if (immutateplayersData.every((player) => player.requiredCall === 0)) {\r\n      this.setState({ maxRaise: 0 });\r\n    }\r\n    this.checkWinner();\r\n  }\r\n\r\n  checkWinner() {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    let numOfActive = 0;\r\n    immutateplayersData.forEach((player) => {\r\n      numOfActive = player.fold ? numOfActive : numOfActive + 1;\r\n    });\r\n    numOfActive === 1\r\n      ? this.isWinner()\r\n      : this.setState({ numOfActivePlayers: numOfActive });\r\n  }\r\n\r\n  isWinner() {\r\n    const immuteState = Object.assign({}, this.state);\r\n    const winner = immuteState.playersData.find((player) => !player.fold);\r\n    winner.cash += immuteState.pot;\r\n\r\n    immuteState.maxRaise = 0;\r\n    this.setState({ immuteState });\r\n    this.newRound();\r\n  }\r\n\r\n  newRound() {\r\n    const immuteState = Object.assign({}, this.state);\r\n    immuteState.playersData.forEach((player) => {\r\n      player.fold = false;\r\n    });\r\n    this.setState({ playersData: immuteState.playersData, pot: 0 });\r\n  }\r\n\r\n  //Player Actions Methods\r\n  playerCheckOrCall(index) {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    const playerData = immutateplayersData[index];\r\n    playerData.cash -= playerData.requiredCall;\r\n    this.addToPot(playerData.requiredCall);\r\n    playerData.requiredCall = 0;\r\n    this.setState({ playersData: immutateplayersData });\r\n    this.adjustRequiredCalls();\r\n  }\r\n\r\n  playerRaise(index, amount) {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    const playerData = immutateplayersData[index];\r\n    //Set Condition here raise must be greated than raise max and\r\n    playerData.cash -= amount;\r\n    this.addToPot(amount);\r\n    playerData.requiredCall = 0;\r\n    immutateplayersData.forEach((player) => {\r\n      if (player.number !== playerData.number) {\r\n        player.requiredCall += amount - this.state.maxRaise;\r\n      }\r\n    });\r\n    this.setState({ playersData: immutateplayersData });\r\n    this.adjustMaxRaise(amount);\r\n    this.adjustRequiredCalls();\r\n  }\r\n\r\n  playerFold(index) {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    const playerData = immutateplayersData[index];\r\n    playerData.fold = true;\r\n    playerData.requiredCall = 0;\r\n    this.setState({ playersData: immutateplayersData });\r\n    this.adjustRequiredCalls();\r\n  }\r\n\r\n  renderPlayers() {\r\n    return this.state.playersData.map((playerData, index) => {\r\n      return (\r\n        <Player\r\n          key={index}\r\n          index={index}\r\n          playerData={playerData}\r\n          addToPot={this.addToPot}\r\n          maxRaise={this.state.maxRaise}\r\n          playerCheckOrCall={this.playerCheckOrCall}\r\n          playerRaise={this.playerRaise}\r\n          playerFold={this.playerFold}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.playersData.length === 0) {\r\n      return <div>Loading...</div>;\r\n    }\r\n    return (\r\n      <div>\r\n        <p>Number of Total players: {this.state.numofTotalPlayers}</p>\r\n        <p>Number of Active players: {this.state.numOfActivePlayers}</p>\r\n        <p>Pot: {this.state.pot}</p>\r\n        <p>Max Raise: {this.state.maxRaise}</p>\r\n        {this.renderPlayers()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class PlayerInput extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label>\r\n          Name:\r\n          <input\r\n            required\r\n            name={\"player\" + this.props.playerNumber}\r\n            type=\"text\"\r\n            onChange={this.props.handleInputChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Cash:\r\n          <input\r\n            required\r\n            name={\"cash\" + this.props.playerNumber}\r\n            type=\"number\"\r\n            min=\"0\"\r\n            onChange={this.props.handleInputChange}\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayerInput;\r\n","import React, { Component } from \"react\";\r\nimport PlayerInput from \"../PlayerInput/PlayerInput\";\r\n\r\nexport class GameInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numberOfTotalPlayers: 2,\r\n    };\r\n    this.renderPlayerInput = this.renderPlayerInput.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    let playersArray = [];\r\n    for (let i = 0; i < this.state.numberOfTotalPlayers; i++) {\r\n      const name = this.state[String(\"player\" + i)];\r\n      const cash = this.state[String(\"cash\" + i)];\r\n      const playerObject = {\r\n        number: i,\r\n        name: name,\r\n        cash: cash,\r\n        fold: false,\r\n        turn: true,\r\n        requiredCall: 0,\r\n      };\r\n      playersArray.push(playerObject);\r\n    }\r\n    this.props.submitPlayers(playersArray);\r\n  }\r\n\r\n  renderPlayerInput() {\r\n    const numberOfTotalPlayers = Number(this.state.numberOfTotalPlayers);\r\n    return Array(numberOfTotalPlayers)\r\n      .fill()\r\n      .map((player, index) => {\r\n        return (\r\n          <PlayerInput\r\n            handleInputChange={this.handleInputChange}\r\n            key={index}\r\n            playerNumber={index}\r\n          />\r\n        );\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Number of players:\r\n          <input\r\n            min=\"2\"\r\n            max=\"9\"\r\n            name=\"numberOfTotalPlayers\"\r\n            type=\"number\"\r\n            value={this.state.numberOfTotalPlayers}\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </label>\r\n        {this.renderPlayerInput()}\r\n        <button onSubmit={this.handleSubmit}>Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameInput;\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport Game from \"./Game/Game\";\nimport GameInput from \"./GameInput/GameInput\";\n//Style the Components\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameReady: false,\n      playersData: [],\n    };\n    this.submitPlayers = this.submitPlayers.bind(this);\n  }\n  submitPlayers(playersArray) {\n    const playersData = playersArray;\n    this.setState({ playersData: playersData });\n    this.setState({ gameReady: true });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {!this.state.gameReady ? (\n            <GameInput submitPlayers={this.submitPlayers} />\n          ) : (\n            <Game\n              numofTotalPlayers={this.state.playersData.length}\n              playersData={this.state.playersData}\n            />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}