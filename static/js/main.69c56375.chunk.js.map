{"version":3,"sources":["Player/Player.js","utils/gameAPI.js","Game/Game.js","PlayerInput/PlayerInput.js","GameInput/GameInput.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","callOrCheck","bind","raise","fold","handleRaiseChange","state","raiseAmount","this","playerData","requiredCall","updateGame","index","Number","event","value","target","setState","style","turn","opacity","className","name","cash","disabled","onClick","onChange","min","maxRaise","max","type","Component","GameLogic","OrginalGameState","action","amount","GameState","cloneDeep","nextTurn","nextPlayerIndex","playersData","findIndex","player","numofTotalPlayers","setTurn","playerIndex","forEach","Boolean","number","addToPot","pot","adjustMaxRaise","adjustRequiredCalls","every","checkWinner","numOfActive","numOfActivePlayers","isWinner","find","newRound","playerCheckOrCall","playerRaise","playerFold","Game","status","updatedGame","map","key","length","renderPlayers","PlayerInput","playerNumber","required","handleInputChange","GameInput","numberOfTotalPlayers","renderPlayerInput","handleSubmit","playersArray","i","playerObject","String","push","submitPlayers","Array","fill","autoComplete","onSubmit","variant","color","App","gameReady","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69c56375.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//TODO:Move the necessary data to the Parent Game Component\r\n//Work with playerData in Player Component and playersData in Game Component\r\n//Add Fold Design and Prevention Code\r\n\r\nexport class Player extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.callOrCheck = this.callOrCheck.bind(this);\r\n    this.raise = this.raise.bind(this);\r\n    this.fold = this.fold.bind(this);\r\n    this.handleRaiseChange = this.handleRaiseChange.bind(this);\r\n    this.state = {\r\n      raiseAmount: 0,\r\n    };\r\n  }\r\n  callOrCheck() {\r\n    if (this.props.playerData.requiredCall === 0) {\r\n      this.props.updateGame(this.props.index, \"checkOrCall\");\r\n    } else {\r\n      this.props.updateGame(this.props.index, \"checkOrCall\");\r\n    }\r\n  }\r\n  raise() {\r\n    this.props.updateGame(\r\n      this.props.index,\r\n      \"raise\",\r\n      Number(this.state.raiseAmount)\r\n    );\r\n  }\r\n  fold() {\r\n    this.props.updateGame(this.props.index, \"fold\");\r\n  }\r\n\r\n  handleRaiseChange(event) {\r\n    const value = event.target.value;\r\n    this.setState({\r\n      raiseAmount: value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={\r\n          !this.props.playerData.turn || this.props.playerData.fold\r\n            ? { opacity: 0.5 }\r\n            : {}\r\n        }\r\n      >\r\n        <div className=\"max-w-m bg-teal-600 rounded overflow-hidden shadow-lg m-4\">\r\n          <span className=\"inline-block px-3 py-1 text-base font-semibold text-gray-100 mr-2\">\r\n            Name : {this.props.playerData.name}\r\n          </span>\r\n          <span className=\"inline-block px-3 py-1 text-base font-semibold text-gray-100 mr-2\">\r\n            Cash : {this.props.playerData.cash}\r\n          </span>\r\n          <span className=\"inline-block px-3 py-1 text-base font-semibold text-yellow-400 mr-2\">\r\n            Required Call: {this.props.playerData.requiredCall}\r\n          </span>\r\n        </div>\r\n        <div className=\"inline-flex\">\r\n          <button\r\n            disabled={!this.props.playerData.turn || this.props.playerData.fold}\r\n            className=\"bg-green-400 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 mx-2 rounded shadow\"\r\n            onClick={this.callOrCheck}\r\n          >\r\n            {this.props.playerData.requiredCall === 0 ? \"Check\" : \"Call\"}\r\n          </button>\r\n          <input\r\n            className=\"text-blue-800 px-2 mx-2 rounded shadow\"\r\n            onChange={this.handleRaiseChange}\r\n            min={this.props.maxRaise}\r\n            max={this.props.playerData.cash}\r\n            value={this.state.raiseAmount}\r\n            name=\"raiseAmount\"\r\n            type=\"number\"\r\n          />\r\n          <button\r\n            disabled={!this.props.playerData.turn || this.props.playerData.fold}\r\n            className=\"bg-orange-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 mx-2 rounded shadow\"\r\n            onClick={this.raise}\r\n          >\r\n            Raise\r\n          </button>\r\n          <button\r\n            disabled={!this.props.playerData.turn || this.props.playerData.fold}\r\n            className=\"bg-red-500 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 mx-2 rounded shadow\"\r\n            onClick={this.fold}\r\n          >\r\n            Fold\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import { cloneDeep } from \"lodash\";\r\n\r\nexport default function GameLogic(OrginalGameState, index, action, amount = 0) {\r\n  // GameState => {\r\n  //       gameId:null\r\n  //       pot: 0,\r\n  //       numOfActivePlayers: 0,\r\n  //       numofTotalPlayers: 0,\r\n  //       status: true,\r\n  //       maxRaise: 0,\r\n  //       playersData: [{\r\n  //         number: index,\r\n  //         name: nameValue,\r\n  //         cash: cashValue,\r\n  //         fold: false,\r\n  //         requiredCall: 0,\r\n  //         turn : false\r\n  //       },{},{}],\r\n  //\r\n  //     };\r\n  //      DO WE NEED DEEP COPY OF GAMESTATE\r\n  //      Automatic Turn Detection\r\n\r\n  const GameState = cloneDeep(OrginalGameState);\r\n  const checkTurn = (GameState) => {\r\n    return Number(GameState.playersData.findIndex((player) => player.turn));\r\n  };\r\n\r\n  //Turns Logic\r\n  const nextTurn = () => {\r\n    let nextPlayerIndex = GameState.playersData.findIndex(\r\n      (player) => player.turn\r\n    );\r\n    do {\r\n      nextPlayerIndex =\r\n        Number(nextPlayerIndex + 1) % GameState.numofTotalPlayers;\r\n    } while (GameState.playersData[nextPlayerIndex].fold);\r\n    setTurn(nextPlayerIndex);\r\n  };\r\n\r\n  const setTurn = (playerIndex) => {\r\n    GameState.playersData.forEach((player) => {\r\n      player.turn = Boolean(player.number === playerIndex);\r\n    });\r\n  };\r\n\r\n  // Pot and Player Adjustments\r\n  const addToPot = (amount) => {\r\n    GameState.pot += amount;\r\n  };\r\n  const adjustMaxRaise = (amount) => {\r\n    GameState.maxRaise = amount;\r\n  };\r\n\r\n  const adjustRequiredCalls = () => {\r\n    if (GameState.playersData.every((player) => player.requiredCall === 0)) {\r\n      GameState.maxRaise = 0;\r\n    }\r\n    checkWinner();\r\n  };\r\n\r\n  //Game Checking\r\n  const checkWinner = () => {\r\n    let numOfActive = 0;\r\n    GameState.playersData.forEach((player) => {\r\n      numOfActive = player.fold ? numOfActive : numOfActive + 1;\r\n    });\r\n    GameState.numOfActivePlayers = numOfActive;\r\n    if (numOfActive === 1) {\r\n      isWinner();\r\n    } else {\r\n      nextTurn();\r\n    }\r\n  };\r\n\r\n  const isWinner = () => {\r\n    const winner = GameState.playersData.find((player) => !player.fold);\r\n    winner.cash += GameState.pot;\r\n    GameState.maxRaise = 0;\r\n    newRound();\r\n  };\r\n\r\n  const newRound = () => {\r\n    GameState.numOfActivePlayers = GameState.numofTotalPlayers;\r\n    GameState.playersData.forEach((player) => {\r\n      player.fold = false;\r\n    });\r\n    GameState.pot = 0;\r\n    setTurn(0);\r\n  };\r\n\r\n  //Player Actions\r\n\r\n  const playerCheckOrCall = (index) => {\r\n    GameState.playersData[index].cash -=\r\n      GameState.playersData[index].requiredCall;\r\n    addToPot(GameState.playersData[index].requiredCall);\r\n    GameState.playersData[index].requiredCall = 0;\r\n    adjustRequiredCalls();\r\n  };\r\n\r\n  const playerRaise = (index, amount) => {\r\n    GameState.playersData[index].cash -= amount;\r\n    addToPot(amount);\r\n    GameState.playersData[index].requiredCall = 0;\r\n    GameState.playersData.forEach((player) => {\r\n      if (\r\n        player.number !== GameState.playersData[index].number &&\r\n        !player.fold\r\n      ) {\r\n        player.requiredCall += amount - GameState.maxRaise;\r\n      }\r\n    });\r\n    adjustMaxRaise(amount);\r\n    adjustRequiredCalls();\r\n  };\r\n\r\n  const playerFold = (index) => {\r\n    GameState.playersData[index].fold = true;\r\n    GameState.playersData[index].requiredCall = 0;\r\n    adjustRequiredCalls();\r\n  };\r\n\r\n  switch (action) {\r\n    case \"fold\":\r\n      playerFold(index);\r\n      return GameState;\r\n    case \"checkOrCall\":\r\n      playerCheckOrCall(index);\r\n      return GameState;\r\n    case \"raise\":\r\n      playerRaise(index, amount);\r\n      return GameState;\r\n    default:\r\n      return GameState;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Player from \"../Player/Player\";\r\nimport GameLogic from \"../utils/gameAPI\";\r\n\r\nexport class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pot: 0,\r\n      numOfActivePlayers: 0,\r\n      numofTotalPlayers: 0,\r\n      status: true,\r\n      maxRaise: 0,\r\n      playersData: [],\r\n    };\r\n    this.updateGame = this.updateGame.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      playersData: this.props.playersData,\r\n      numOfActivePlayers: this.props.numofTotalPlayers,\r\n      numofTotalPlayers: this.props.numofTotalPlayers,\r\n    });\r\n  }\r\n\r\n  updateGame(index, action, amount = 0) {\r\n    const updatedGame = GameLogic(this.state, index, action, amount);\r\n\r\n    this.setState(updatedGame);\r\n  }\r\n\r\n  renderPlayers() {\r\n    return this.state.playersData.map((playerData, index) => {\r\n      return (\r\n        <Player\r\n          key={index}\r\n          index={index}\r\n          playerData={playerData}\r\n          addToPot={this.addToPot}\r\n          maxRaise={this.state.maxRaise}\r\n          updateGame={this.updateGame}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.playersData.length === 0) {\r\n      return <div>Loading...</div>;\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\"max-w-m bg-blue-400 rounded overflow-hidden shadow-lg m-4\">\r\n          <p className=\"inline px-2 font-bold \">\r\n            Total players: {this.state.numofTotalPlayers}\r\n          </p>\r\n          <p className=\"inline px-2 font-bold\">\r\n            Active players: {this.state.numOfActivePlayers}\r\n          </p>\r\n          <p className=\"font-bold text-black\">Pot: {this.state.pot}</p>\r\n          <p className=\"font-bold text-red-700\">\r\n            Max Raise: {this.state.maxRaise}\r\n          </p>\r\n        </div>\r\n        {this.renderPlayers()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class PlayerInput extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p className=\"mx-3 text-base pt-5 \">\r\n          {`Player Number ${Number(this.props.playerNumber + 1)}:`}\r\n        </p>\r\n        <label className=\"block text-black text-sm font-bold m-2\">Name:</label>\r\n        <input\r\n          className=\"bg-gray-700 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-black leading-tight focus:outline-none focus:bg-blue-500 focus:border-black-500\"\r\n          required\r\n          name={\"player\" + this.props.playerNumber}\r\n          type=\"text\"\r\n          onChange={this.props.handleInputChange}\r\n        />\r\n        <br />\r\n        <label className=\"block text-black text-sm font-bold m-2\">Cash:</label>\r\n        <input\r\n          className=\"bg-gray-700 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-black leading-tight focus:outline-none focus:bg-blue-500 focus:border-black-500\"\r\n          required\r\n          name={\"cash\" + this.props.playerNumber}\r\n          type=\"number\"\r\n          min=\"0\"\r\n          onChange={this.props.handleInputChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayerInput;\r\n","import React, { Component } from \"react\";\r\nimport PlayerInput from \"../PlayerInput/PlayerInput\";\r\n\r\nexport class GameInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numberOfTotalPlayers: 2,\r\n    };\r\n    this.renderPlayerInput = this.renderPlayerInput.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    let playersArray = [];\r\n    for (let i = 0; i < this.state.numberOfTotalPlayers; i++) {\r\n      const name = this.state[String(\"player\" + i)];\r\n      const cash = this.state[String(\"cash\" + i)];\r\n      const playerObject = {\r\n        number: i,\r\n        name: name,\r\n        cash: cash,\r\n        fold: false,\r\n        turn: true,\r\n        requiredCall: 0,\r\n      };\r\n      playersArray.push(playerObject);\r\n    }\r\n    this.props.submitPlayers(playersArray);\r\n  }\r\n\r\n  renderPlayerInput() {\r\n    const numberOfTotalPlayers = Number(this.state.numberOfTotalPlayers);\r\n    return Array(numberOfTotalPlayers)\r\n      .fill()\r\n      .map((player, index) => {\r\n        return (\r\n          <PlayerInput\r\n            handleInputChange={this.handleInputChange}\r\n            key={index}\r\n            playerNumber={index}\r\n          />\r\n        );\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"bg-blue-800 shadow-md rounded  p-8 m-4\"\r\n        autoComplete=\"off\"\r\n        onSubmit={this.handleSubmit}\r\n      >\r\n        <label className=\"block text-white text-sm font-bold mb-2\">\r\n          Number of players:\r\n        </label>\r\n        <input\r\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-black leading-tight focus:outline-none focus:shadow-outline\"\r\n          min=\"2\"\r\n          max=\"9\"\r\n          name=\"numberOfTotalPlayers\"\r\n          type=\"number\"\r\n          value={this.state.numberOfTotalPlayers}\r\n          onChange={this.handleInputChange}\r\n        />\r\n        {this.renderPlayerInput()}\r\n        <button\r\n          className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold mt-5 py-1 px-4 rounded-full\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          Submit\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameInput;\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport Game from \"./Game/Game\";\nimport GameInput from \"./GameInput/GameInput\";\n//Style the Components\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameReady: false,\n      playersData: [],\n    };\n    this.submitPlayers = this.submitPlayers.bind(this);\n  }\n  submitPlayers(playersArray) {\n    const playersData = playersArray;\n    this.setState({ playersData: playersData });\n    this.setState({ gameReady: true });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {!this.state.gameReady ? (\n            <GameInput submitPlayers={this.submitPlayers} />\n          ) : (\n            <Game\n              numofTotalPlayers={this.state.playersData.length}\n              playersData={this.state.playersData}\n            />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}