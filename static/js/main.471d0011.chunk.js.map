{"version":3,"sources":["Player/Player.js","Game/Game.js","PlayerInput/PlayerInput.js","GameInput/GameInput.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","callOrCheck","bind","raise","fold","handleRaiseChange","state","raiseAmount","this","playerData","requiredCall","console","log","playerCheckOrCall","index","immuteState","Object","assign","amount","Number","playerRaise","playerFold","event","value","target","setState","style","turn","opacity","className","name","cash","disabled","onClick","onChange","min","maxRaise","max","type","Component","Game","pot","numOfActivePlayers","numofTotalPlayers","status","playersData","addToPot","adjustMaxRaise","setTurn","immutateplayersData","slice","playerIndex","findIndex","player","nextPlayerIndex","forEach","number","prevState","every","checkWinner","numOfActive","isWinner","nextTurn","find","newRound","adjustRequiredCalls","map","key","length","renderPlayers","PlayerInput","playerNumber","required","handleInputChange","GameInput","numberOfTotalPlayers","renderPlayerInput","handleSubmit","playersArray","i","playerObject","String","push","submitPlayers","Array","fill","autoComplete","onSubmit","variant","color","App","gameReady","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.471d0011.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//TODO:Move the necessary data to the Parent Game Component\r\n//Work with playerData in Player Component and playersData in Game Component\r\n//Add Fold Design and Prevention Code\r\n\r\nexport class Player extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.callOrCheck = this.callOrCheck.bind(this);\r\n    this.raise = this.raise.bind(this);\r\n    this.fold = this.fold.bind(this);\r\n    this.handleRaiseChange = this.handleRaiseChange.bind(this);\r\n    this.state = {\r\n      raiseAmount: 0,\r\n    };\r\n  }\r\n  callOrCheck() {\r\n    if (this.props.playerData.requiredCall === 0) {\r\n      console.log(\"Check\");\r\n      this.props.playerCheckOrCall(this.props.index);\r\n    } else {\r\n      console.log(\"Call\");\r\n      this.props.playerCheckOrCall(this.props.index);\r\n    }\r\n  }\r\n  raise() {\r\n    const immuteState = Object.assign({}, this.state);\r\n    const amount = Number(immuteState.raiseAmount);\r\n    this.props.playerRaise(this.props.index, amount);\r\n  }\r\n  fold() {\r\n    console.log(\"fold\");\r\n    this.props.playerFold(this.props.index);\r\n  }\r\n\r\n  handleRaiseChange(event) {\r\n    const value = event.target.value;\r\n    this.setState({\r\n      raiseAmount: value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={\r\n          !this.props.playerData.turn || this.props.playerData.fold\r\n            ? { opacity: 0.5 }\r\n            : {}\r\n        }\r\n      >\r\n        <div className=\"max-w-m bg-teal-600 rounded overflow-hidden shadow-lg m-4\">\r\n          <span className=\"inline-block px-3 py-1 text-base font-semibold text-gray-100 mr-2\">\r\n            Name : {this.props.playerData.name}\r\n          </span>\r\n          <span className=\"inline-block px-3 py-1 text-base font-semibold text-gray-100 mr-2\">\r\n            Cash : {this.props.playerData.cash}\r\n          </span>\r\n          <span className=\"inline-block px-3 py-1 text-base font-semibold text-yellow-400 mr-2\">\r\n            Required Call: {this.props.playerData.requiredCall}\r\n          </span>\r\n        </div>\r\n        <div className=\"inline-flex\">\r\n          <button\r\n            disabled={!this.props.playerData.turn || this.props.playerData.fold}\r\n            className=\"bg-green-400 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 mx-2 rounded shadow\"\r\n            onClick={this.callOrCheck}\r\n          >\r\n            {this.props.playerData.requiredCall === 0 ? \"Check\" : \"Call\"}\r\n          </button>\r\n          <input\r\n            className=\"text-blue-800 px-2 mx-2 rounded shadow\"\r\n            onChange={this.handleRaiseChange}\r\n            min={this.props.maxRaise}\r\n            max={this.props.playerData.cash}\r\n            value={this.state.raiseAmount}\r\n            name=\"raiseAmount\"\r\n            type=\"number\"\r\n          />\r\n          <button\r\n            disabled={!this.props.playerData.turn || this.props.playerData.fold}\r\n            className=\"bg-orange-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 mx-2 rounded shadow\"\r\n            onClick={this.raise}\r\n          >\r\n            Raise\r\n          </button>\r\n          <button\r\n            disabled={!this.props.playerData.turn || this.props.playerData.fold}\r\n            className=\"bg-red-500 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 mx-2 rounded shadow\"\r\n            onClick={this.fold}\r\n          >\r\n            Fold\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import React, { Component } from \"react\";\r\nimport Player from \"../Player/Player\";\r\n\r\n// Make Turn Design and Prevention Code\r\nexport class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pot: 0,\r\n      numOfActivePlayers: 0,\r\n      numofTotalPlayers: 0,\r\n      status: true,\r\n      maxRaise: 0,\r\n      playersData: [],\r\n      // Players data is the one we will manipulate containing array of objects\r\n      // {\r\n      //   number: index,\r\n      //   name: nameVAlue,\r\n      //   cash: cashValue,\r\n      //   fold: false,\r\n      //   requiredCall: 0,\r\n      //   turn : false\r\n      // }\r\n    };\r\n    this.addToPot = this.addToPot.bind(this);\r\n    this.adjustMaxRaise = this.adjustMaxRaise.bind(this);\r\n    this.playerCheckOrCall = this.playerCheckOrCall.bind(this);\r\n    this.playerRaise = this.playerRaise.bind(this);\r\n    this.playerFold = this.playerFold.bind(this);\r\n    this.setTurn = this.setTurn.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //TODO: Research getDerivedStateFromProps\r\n    this.setState({\r\n      playersData: this.props.playersData,\r\n      numOfActivePlayers: this.props.numofTotalPlayers,\r\n      numofTotalPlayers: this.props.numofTotalPlayers,\r\n    });\r\n  }\r\n\r\n  //Game Actions Methods\r\n  nextTurn() {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    const playerIndex = immutateplayersData.findIndex((player) => player.turn);\r\n\r\n    let nextPlayerIndex = Number(\r\n      (playerIndex + 1) % Number(this.state.numofTotalPlayers)\r\n    );\r\n    while (immutateplayersData[nextPlayerIndex].fold) {\r\n      nextPlayerIndex = Number(\r\n        (nextPlayerIndex + 1) % Number(this.state.numofTotalPlayers)\r\n      );\r\n    }\r\n    this.setTurn(nextPlayerIndex);\r\n  }\r\n  setTurn(playerIndex) {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    immutateplayersData.forEach((player) => {\r\n      player.turn = player.number === playerIndex;\r\n    });\r\n    this.setState({ playersData: immutateplayersData });\r\n  }\r\n\r\n  addToPot(amount) {\r\n    this.setState((prevState) => {\r\n      return { pot: prevState.pot + amount };\r\n    });\r\n  }\r\n\r\n  adjustMaxRaise(amount) {\r\n    this.setState({ maxRaise: amount });\r\n  }\r\n  //We might want to make adjustRequiredCalls and checkWinner the same function\r\n  adjustRequiredCalls() {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    if (immutateplayersData.every((player) => player.requiredCall === 0)) {\r\n      this.setState({ maxRaise: 0 });\r\n    }\r\n    this.checkWinner();\r\n  }\r\n\r\n  checkWinner() {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    let numOfActive = 0;\r\n    immutateplayersData.forEach((player) => {\r\n      numOfActive = player.fold ? numOfActive : numOfActive + 1;\r\n    });\r\n\r\n    if (numOfActive === 1) {\r\n      this.isWinner();\r\n    } else {\r\n      this.nextTurn();\r\n      this.setState({ numOfActivePlayers: numOfActive });\r\n    }\r\n  }\r\n\r\n  isWinner() {\r\n    const immuteState = Object.assign({}, this.state);\r\n    const winner = immuteState.playersData.find((player) => !player.fold);\r\n    winner.cash += immuteState.pot;\r\n\r\n    immuteState.maxRaise = 0;\r\n    this.setState({ immuteState });\r\n    this.newRound();\r\n  }\r\n\r\n  newRound() {\r\n    const immuteState = Object.assign({}, this.state);\r\n    immuteState.playersData.forEach((player) => {\r\n      player.fold = false;\r\n    });\r\n    this.setState({ playersData: immuteState.playersData, pot: 0 });\r\n    this.setTurn(0);\r\n  }\r\n\r\n  //Player Actions Methods\r\n  playerCheckOrCall(index) {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    const playerData = immutateplayersData[index];\r\n    playerData.cash -= playerData.requiredCall;\r\n    this.addToPot(playerData.requiredCall);\r\n    playerData.requiredCall = 0;\r\n    this.setState({ playersData: immutateplayersData });\r\n    this.adjustRequiredCalls();\r\n  }\r\n\r\n  playerRaise(index, amount) {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    const playerData = immutateplayersData[index];\r\n    //Set Condition here raise must be greated than raise max and\r\n    playerData.cash -= amount;\r\n    this.addToPot(amount);\r\n    playerData.requiredCall = 0;\r\n    immutateplayersData.forEach((player) => {\r\n      if (player.number !== playerData.number) {\r\n        player.requiredCall += amount - this.state.maxRaise;\r\n      }\r\n    });\r\n    this.setState({ playersData: immutateplayersData });\r\n    this.adjustMaxRaise(amount);\r\n    this.adjustRequiredCalls();\r\n  }\r\n\r\n  playerFold(index) {\r\n    const immutateplayersData = this.state.playersData.slice();\r\n    const playerData = immutateplayersData[index];\r\n    playerData.fold = true;\r\n    playerData.requiredCall = 0;\r\n    this.setState({ playersData: immutateplayersData });\r\n    this.adjustRequiredCalls();\r\n  }\r\n\r\n  renderPlayers() {\r\n    return this.state.playersData.map((playerData, index) => {\r\n      return (\r\n        <Player\r\n          key={index}\r\n          index={index}\r\n          playerData={playerData}\r\n          addToPot={this.addToPot}\r\n          maxRaise={this.state.maxRaise}\r\n          playerCheckOrCall={this.playerCheckOrCall}\r\n          playerRaise={this.playerRaise}\r\n          playerFold={this.playerFold}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.playersData.length === 0) {\r\n      return <div>Loading...</div>;\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\"max-w-m bg-blue-400 rounded overflow-hidden shadow-lg m-4\">\r\n          <p className=\"inline px-2 font-bold \">\r\n            Total players: {this.state.numofTotalPlayers}\r\n          </p>\r\n          <p className=\"inline px-2 font-bold\">\r\n            Active players: {this.state.numOfActivePlayers}\r\n          </p>\r\n          <p className=\"font-bold text-black\">Pot: {this.state.pot}</p>\r\n          <p className=\"font-bold text-red-700\">\r\n            Max Raise: {this.state.maxRaise}\r\n          </p>\r\n        </div>\r\n        {this.renderPlayers()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class PlayerInput extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p className=\"mx-3 text-base pt-5 \">\r\n          {`Player Number ${Number(this.props.playerNumber + 1)}:`}\r\n        </p>\r\n        <label className=\"block text-black text-sm font-bold m-2\">Name:</label>\r\n        <input\r\n          className=\"bg-gray-700 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-black leading-tight focus:outline-none focus:bg-blue-500 focus:border-black-500\"\r\n          required\r\n          name={\"player\" + this.props.playerNumber}\r\n          type=\"text\"\r\n          onChange={this.props.handleInputChange}\r\n        />\r\n        <br />\r\n        <label className=\"block text-black text-sm font-bold m-2\">Cash:</label>\r\n        <input\r\n          className=\"bg-gray-700 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-black leading-tight focus:outline-none focus:bg-blue-500 focus:border-black-500\"\r\n          required\r\n          name={\"cash\" + this.props.playerNumber}\r\n          type=\"number\"\r\n          min=\"0\"\r\n          onChange={this.props.handleInputChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayerInput;\r\n","import React, { Component } from \"react\";\r\nimport PlayerInput from \"../PlayerInput/PlayerInput\";\r\n\r\nexport class GameInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numberOfTotalPlayers: 2,\r\n    };\r\n    this.renderPlayerInput = this.renderPlayerInput.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    let playersArray = [];\r\n    for (let i = 0; i < this.state.numberOfTotalPlayers; i++) {\r\n      const name = this.state[String(\"player\" + i)];\r\n      const cash = this.state[String(\"cash\" + i)];\r\n      const playerObject = {\r\n        number: i,\r\n        name: name,\r\n        cash: cash,\r\n        fold: false,\r\n        turn: true,\r\n        requiredCall: 0,\r\n      };\r\n      playersArray.push(playerObject);\r\n    }\r\n    this.props.submitPlayers(playersArray);\r\n  }\r\n\r\n  renderPlayerInput() {\r\n    const numberOfTotalPlayers = Number(this.state.numberOfTotalPlayers);\r\n    return Array(numberOfTotalPlayers)\r\n      .fill()\r\n      .map((player, index) => {\r\n        return (\r\n          <PlayerInput\r\n            handleInputChange={this.handleInputChange}\r\n            key={index}\r\n            playerNumber={index}\r\n          />\r\n        );\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"bg-blue-800 shadow-md rounded  p-8 m-4\"\r\n        autoComplete=\"off\"\r\n        onSubmit={this.handleSubmit}\r\n      >\r\n        <label className=\"block text-white text-sm font-bold mb-2\">\r\n          Number of players:\r\n        </label>\r\n        <input\r\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-black leading-tight focus:outline-none focus:shadow-outline\"\r\n          min=\"2\"\r\n          max=\"9\"\r\n          name=\"numberOfTotalPlayers\"\r\n          type=\"number\"\r\n          value={this.state.numberOfTotalPlayers}\r\n          onChange={this.handleInputChange}\r\n        />\r\n        {this.renderPlayerInput()}\r\n        <button\r\n          className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold mt-5 py-1 px-4 rounded-full\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          Submit\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameInput;\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport Game from \"./Game/Game\";\nimport GameInput from \"./GameInput/GameInput\";\n//Style the Components\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameReady: false,\n      playersData: [],\n    };\n    this.submitPlayers = this.submitPlayers.bind(this);\n  }\n  submitPlayers(playersArray) {\n    const playersData = playersArray;\n    this.setState({ playersData: playersData });\n    this.setState({ gameReady: true });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {!this.state.gameReady ? (\n            <GameInput submitPlayers={this.submitPlayers} />\n          ) : (\n            <Game\n              numofTotalPlayers={this.state.playersData.length}\n              playersData={this.state.playersData}\n            />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}